import { Ty, Decl } from "./lib";
import { Wit, Response } from "./wit";
import * as readline from "readline";

const token = "5GKRZP7VSKITBBBQ4KU4AV6ULV3CFAF2";

// ----------- Generated by Opal Tool ----------------

type Msg = string;
type Time = "now" | "later";
type Send = { msg: Msg, time: Time };
type Intent =
    | { kind: "Read", data: {} }
    | { kind: "Send", data: Send };

let decls: Decl[] = [
    {
        kind: "FreeText",
        tag: "Msg"
    },
    {
        kind: "Keywords",
        tag: "Time",
        data: ["now", "later"]
    },
    {
        kind: "TyDec",
        tag: "Send",
        data: {
            kind: "Rec",
            data: [
                ["msg", { kind: "Def", data: "Msg" }],
                ["time", { kind: "Def", data: "Time" }]
            ]
        }
    },
    {
        kind: "Trait",
        tag: "Intent",
        data: [
            ["Read", { kind: "Rec", data: [] }],
            ["Send", { kind: "Def", data: "Send" }]
        ]
    }
];

// --------------- End Generated --------------------

let msgs: any = {
    "now": [],
    "later": []
};

function processIntent(s: Intent) {
    switch (s.kind) {
        case "Read": {
            console.log("Now:");
            msgs["now"].forEach((x: any, i: number) =>
                console.log("\t", i, ":", x[0]))
            console.log("Later:");
            msgs["later"].forEach((x: any, i: number) =>
                console.log("\t", i, ":", x[0]))
            console.log("");
            return;
        }
        case "Send": {
            console.log("Message sent!");
            msgs[s.data.time].unshift([s.data.msg, s.data.time]);
            return;
        }
    }
}

const rl = readline.createInterface(<any>{
    input: process.stdin,
    output: process.stdout,
    prompt: "Wit-Messenger> "
});

const wit = new Wit(token, decls);

let verbose = false;

rl.prompt();

rl.on("line", (s: string) => {
    if (s.startsWith(":q")) {
        rl.close();
    } else if (s.startsWith(":v")) {
        verbose = !verbose;
        console.log("Verbose is ", verbose);
        rl.prompt();
    } else {
        wit.callAPI(s)
            .then(x => {
                if (verbose) console.log("Response: ", x, "\n");
                return x;
            })
            .then(res => wit.parse<Intent>(res, "Intent"))
            .then(x => {
                if (verbose) console.log("Parsed Intent: ", x, "\n");
                return x;
            })
            .then(processIntent)
            .catch(() => {
                console.log("Oops! Wit didn't understand what you said.");
                rl.prompt();
            })
            .then(() => rl.prompt());
    }
});
